BASE <http://ontology.qworum.net/class/> # TODO end with #?

# Metadata
PREFIX foaf:    <http://xmlns.com/foaf/0.1/> 
PREFIX dcterms: <http://purl.org/dc/terms/>       # https://www.dublincore.org/specifications/dublin-core/dcmi-terms/
PREFIX cc:      <http://creativecommons.org/ns#> 
PREFIX owl:     <http://www.w3.org/2002/07/owl#>
PREFIX vann:    <http://purl.org/vocab/vann/> 

# Ontology
PREFIX :     <>
PREFIX qrmi: <http://ontology.qworum.net/interface/>
PREFIX qrmv: <http://ontology.qworum.net/v/>
PREFIX rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> # https://www.w3.org/TR/rdf-schema/
PREFIX xsd:  <http://www.w3.org/2001/XMLSchema#> 

# -- Document metadata --------------------------------------------------
<>
  a foaf:Document;
  dcterms:description '''
    Ontology for defining Qworum classes.
    Class definitions describe object properties and methods.

    Classes can optionally implement an interface, in which case they don't have to repeat the information defined by the interface. If a method has an Qworum object as parameter, then the class definition can specify the Qworum class of the object.

    Use cases:
    ➜ Runtime verification by the Qworum runtime (check call params, return values etc).
  '''@en;
  foaf:maker <https://qworum.net/data/DoğaArmangil.ttl#id>;
  cc:license <https://creativecommons.org/publicdomain/zero/1.0/>;

  a owl:Ontology;
  vann:preferredNamespacePrefix 'qrmc';
  vann:preferredNamespaceUri 'http://ontology.qworum.net/class/'.

# RDF Classes  --------------------------------------------------

# TODO class must be definable without extending an interface

# The Qworum class
:Class rdfs:subClassOf rdfs:Class.
:Method rdfs:subClassOf rdfs:Class.

:JsonPointer rdfs:subClassOf rdfs:Class. # has: name, schema
:SemanticDataPointer rdfs:subClassOf rdfs:Class. # has: name, shape
:ClassPointer rdfs:subClassOf rdfs:Class. 

:implements
  a rdf:Property;
  rdfs:domain :Class;
  rdfs:range qrmi:Interface.

:base
  a rdf:Property;
  rdfs:comment 'The base path of a Qworum class.'@en;
  rdfs:domain :Class;
  rdfs:range :basePath.

:property
  a rdf:Property;
  rdfs:domain :Interface;
  rdfs:range 
    :JsonPointer, :SemanticDataPointer, :ClassPointer.

:class
  a rdf:Property;
  rdfs:domain :ClassPointer;
  rdfs:range :Class.

:schema
  a rdf:Property;
  rdfs:comment '''
    A JSON schema. Can be either linked or inline.
  '''@en;
  rdfs:seeAlso <https://json-schema.org/learn/getting-started-step-by-step>;
  rdfs:domain :JsonPointer, :JsonValue;
  rdfs:range qrmv:anyIRI, qrmv:Json.

:shapes
  a rdf:Property;
  rdfs:comment '''
    A ShEx schema. Can be either linked or inline.
  '''@en;
  rdfs:seeAlso <https://shex.io/shex-primer/#quickStart>;
  rdfs:domain :SemanticDataPointer, :SemanticDataValue;
  rdfs:range qrmv:anyIRI, xsd:string.

:shapeMap
  a rdf:Property;
  rdfs:comment '''
    The nodes and predicates to validate with the ShEx shapes.
    Can be either linked or inline.
  '''@en;
  rdfs:seeAlso <https://shex.io/shex-primer/#quickStart>;
  rdfs:domain :SemanticDataPointer, :SemanticDataValue;
  rdfs:range qrmv:anyIRI, xsd:string.

:method
  a rdf:Property;
  rdfs:domain :Interface;
  rdfs:range :Method.

:path
  a rdf:Property;
  rdfs:domain :Method;
  rdfs:range :methodPath. # TODO allow xsd:string?

:parameter
  a rdf:Property;
  rdfs:comment '''
    For each interface parameter defined in this class's interface,
    specify the actual Qworum class that implements the interface.
  '''@en;
  rdfs:domain :Method;
  rdfs:range :ClassPointer.

:name
  a rdf:Property;
  rdfs:domain
    :JsonPointer, :SemanticDataPointer, :ClassPointer;
  rdfs:range xsd:string.


# Other

:basePath
  rdfs:subClassOf qrmv:anyIRI;
  rdfs:comment '''
    An IRI path that starts and ends with an "/". 
    The slashes are implicitly added if they are missing.
  '''@en.

:methodPath
  rdfs:subClassOf qrmv:anyIRI;
  rdfs:comment 'An IRI path that does not start with an "/".'@en.


# End of file
[] qrmv:end [].
